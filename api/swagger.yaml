---
swagger: "2.0"
info:
  version: "v0.1.0"
  title: "SOVA API"
host: "stage.api.fsep-lab.ru"
basePath: "/sova-server"
tags:
- name: "registration"
  description: "Регистрация и авторизация"
- name: "tasks"
  description: "Работа с задачами"
- name: "feed"
  description: "Работа с лентой"
- name: "responses"
  description: "Работа с откликами"
- name: "comments"
  description: "Работа с комментариями"
- name: "favorites"
  description: "Работа с избранным"
- name: "invitations"
  description: "Работа с приглашениями"
- name: "users"
  description: "Работа с пользователями"
- name: "storage"
  description: "Работа с файловым хранилищем"
- name: "subscriptions"
  description: "Работа с подписками"
- name: "conversations"
  description: "Работа с обсуждениями"
- name: "search"
  description: "Работа с поиском"
- name: "commons"
  description: "Дополнительные возможности"
- name: "profile"
  description: "Работа с профилем"
- name: "posts"
  description: "Работа с постами"
- name: "notes"
  description: "Работа с записями"
- name: "events"
  description: "Работа с событиями"
schemes:
- "http"
produces:
- "application/json"
paths:
  /my/author/events:
  /events:
  /events/{event-id}:
    get:
      tags:
      - "events"
      summary: "Получение списка событий, котрые были созданы мной"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "published"
        in: "query"
        description: "В зависимости от значения параметра возвращает опубликованны\
          е, либо не опубликованные события"
        required: true
        type: "boolean"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/PostsResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /events/{event-id}/participants:

  /notes/{note-id}:
    put:
      tags:
      - "notes"
      summary: "Лайк записи"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "note-id"
        in: "path"
        description: "Идентификатор записи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "action"
        in: "query"
        description: "Чтобы сделаь like записи, необходимо указать значение like"
        required: false
        type: "string"
      responses:
        201:
          description: "Лайк поставлен"
          schema:
            $ref: "#/definitions/NoteResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Запись не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/author/posts:
      get:
        tags:
        - "posts"
        summary: "Получение списка постов, котрые были созданы мной"
        produces:
        - "application/json"
        parameters:
        - name: "Auth-Token"
          in: "header"
          description: "Токен авторизации"
          required: true
          type: "string"
        - name: "published"
          in: "query"
          description: "В зависимости от значения параметра возвращает опубликованны\
            е, либо не опубликованные посты"
          required: true
          type: "boolean"
        - name: "count"
          in: "query"
          description: "Количество возвращаемых записей"
          required: true
          type: "integer"
        - name: "from"
          in: "query"
          description: "Указывается идентификатор записи, с которой следует начать о\
            тсчет (запись не включается). Если значение параметра не задано, возвращ\
            аются записи, начиная с первой по дате публикаци."
          required: false
          type: "integer"
        responses:
          200:
            description: "Запрос успешно обработан"
            schema:
              $ref: "#/definitions/PostsResponseDto"
          401:
            description: "Пользователь не авторизован"
            schema:
              $ref: "#/definitions/401_ErrorDto"
          403:
            description: "Данное действие для пользователя запрещенно"
            schema:
              $ref: "#/definitions/403_ErrorDto"
          500:
            description: "Внутренняя ошибка сервера"
            schema:
              $ref: "#/definitions/500_ErrorDto"
  /posts/{post-id}:
    get:
      tags:
      - "posts"
      summary: "Получить информацию по посту"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "post-id"
        in: "path"
        description: "Идентификатор поста"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Представление поста"
          schema:
            $ref: "#/definitions/PostResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пост не найден"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
    put:
      tags:
      - "posts"
      summary: "Обновление поста"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "post-id"
        in: "path"
        description: "Идентификатор поста"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Обновляемая информация по посту"
        required: false
        schema:
          $ref: "#/definitions/PostDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Задача обновлена"
          schema:
            $ref: "#/definitions/TaskResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пост не найден"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
    delete:
      tags:
      - "posts"
      summary: "Удалить пост"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "post-id"
        in: "path"
        description: "Идентификатор поста"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Пост успешно удален"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пост не найден"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /posts:
    post:
      tags:
      - "posts"
      summary: "Создание поста"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Информация о посте, который необходимо создать"
        required: true
        schema:
          $ref: "#/definitions/PostDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Пост создан"
          schema:
            $ref: "#/definitions/PostResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
    get:
      tags:
      - "search"
      summary: "Поиск постов по ключевому слову"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "find"
        in: "query"
        description: "Если значения поля задано, выполняется поиск постов, характеристики которых попадают под ключевое слово."
        required: false
        type: "string"
      - name: "by"
        in: "query"
        description: "Если значения поля равно tag, выполняется поиск по тегу."
        required: false
        type: "string"
      - name: "tag"
        in: "query"
        description: "Значение тега, используется в паре с by=tag"
        required: false
        type: "string"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/PostsResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /users/{user-id}/posts:
    get:
      tags:
      - "posts"
      summary: "Получение списка постов, котрые были созданы определенным пользователем"
      description: "Возвращаются только опубликованные посты"
      produces:
      - "application/json"
      parameters:
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/PostsResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пользователь не найден"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /users/{user-id}/resume:
    get:
      tags:
      - "profile"
      summary: "Получение резюме пользователя"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/ResumeResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пользователь не найден"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
    put:
      tags:
      - "profile"
      summary: "Обновление резюме"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Обновляемая информация по резюме"
        required: true
        schema:
          $ref: "#/definitions/ResumeDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Резюме обновлено"
          schema:
            $ref: "#/definitions/ResumeResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пользователь не найден"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/tags:
    post:
      tags:
      - "subscriptions"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      summary: "Подписка на тег"
      parameters:
      - in: "body"
        name: "body"
        description: "Информация о теге, на который мы хотим подписаться"
        required: true
        schema:
          $ref: "#/definitions/PostTagDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Подписка на тег прошла успешно"
          schema:
            $ref: "#/definitions/TagResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
    get:
      tags:
      - "subscriptions"
      summary: "Получение списка тегов, на которые я подписан"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: false
        type: "string"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/TagsResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/tags/{tag}:
      delete:
        tags:
        - "subscriptions"
        summary: "Отписаться от тега"
        consumes:
        - "application/json"
        parameters:
        - name: "tag"
          in: "path"
          description: "Значение тега, от которого мы отписываемся"
          required: true
          type: "string"
        - name: "Auth-Token"
          in: "header"
          description: "Токен авторизации"
          required: true
          type: "string"
        responses:
          200:
            description: "Отписывание от тега произошло успешно"
            schema:
              $ref: "#/definitions/DeletedResponseDto"
          401:
            description: "Пользователь не авторизован"
            schema:
              $ref: "#/definitions/401_ErrorDto"
          403:
            description: "Данное действие для пользователя запрещенно"
            schema:
              $ref: "#/definitions/403_ErrorDto"
          404:
            description: "Тег не найден"
            schema:
              $ref: "#/definitions/404_ErrorDto"
          500:
            description: "Внутренняя ошибка сервера"
            schema:
              $ref: "#/definitions/500_ErrorDto"
  /uploads/credentials:
    get:
      tags:
      - "storage"
      summary: "Получения тикета для загрузки"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: false
        type: "string"
      - name: "TempAuth-Token"
        in: "header"
        description: "Временный токен авторизации, должен быть отправлен вместе с параметром to_avatar_upload. Токен должен быть подтвержден"
        required: false
        type: "string"
      - name: "reason"
        in: "query"
        description: "Цель операции - для получения тикета необходимо задать значе\
          ние to_upload, в случае загузки аватарки - to_avatar_upload"
        required: true
        type: "string"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/EmptyResponseDto"
          headers:
            ticket:
              type: "string"
              description: "Тикет для загрузки"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /login:
    post:
      tags:
      - "registration"
      summary: "Авторизация"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "NickName"
        in: "header"
        description: "Логин"
        required: false
        type: "string"
      - name: "Phone"
        in: "header"
        description: "Номер телефона"
        required: false
        type: "string"
      - name: "Password"
        in: "header"
        description: "Пароль"
        required: true
        type: "string"
      responses:
        201:
          description: "Авторизация прошла успешно"
          schema:
            $ref: "#/definitions/UserResponseDto"
          headers:
            Auth-Token:
              type: "string"
              description: "Токен авторизации"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Registration"
  /my/author/tasks:
    get:
      tags:
      - "tasks"
      summary: "Получение списка задач, котрые были созданы мной"
      operationId: "myAuthorTasksGET"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "published"
        in: "query"
        description: "В зависимости от значения параметра возвращает опубликованны\
          е, либо не опубликованные задачи"
        required: true
        type: "boolean"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/TasksResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
  /my/favorites:
    get:
      tags:
      - "favorites"
      summary: "Получение списка записей, добавленных в избранное"
      description: ""
      operationId: "myFavoritesGET"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: false
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/NotesResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Favorites"
    post:
      tags:
      - "favorites"
      summary: "Добавить в избранное"
      description: ""
      operationId: "myFavoritesPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Информация о записи, которую следует добавить в избранное"
        required: true
        schema:
          $ref: "#/definitions/PostFavoriteTaskDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Задача добавлена в избранное"
          schema:
            $ref: "#/definitions/NoteResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Favorites"
  /my/favorites/{note-id}:
    delete:
      tags:
      - "favorites"
      summary: "Удалить запись из избранного"
      description: ""
      operationId: "myFavoritesNote_idDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "note-id"
        in: "path"
        description: "Идентификатор записи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Запись успешно удалена из избранного"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Favorites"
  /my/feed:
    get:
      tags:
      - "feed"
      summary: "Получение ленты пользователя"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/NotesResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/invitations:
    get:
      tags:
      - "invitations"
      summary: "Список моих приглашений на задачи"
      description: ""
      operationId: "myInvitationsGET"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Представление задачи"
          schema:
            $ref: "#/definitions/UserInvitesResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/invitations/{invitation-id}:
    delete:
      tags:
      - "invitations"
      summary: "Отказаться от приглашения"
      description: ""
      operationId: "myInvitationsInvite_idDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "invitation-id"
        in: "path"
        description: "Идентификатор приглашения"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Отказ от приглашения произведен успешно"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /invitations/{invitation-id}:
    delete:
      tags:
      - "invitations"
      summary: "Отмена приглашения."
      description: "Запрос выполняется, только если пользорватель - автор приглашения"
      produces:
      - "application/json"
      parameters:
      - name: "invitation-id"
        in: "path"
        description: "Идентификатор приглашения"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Приглашение успешно отменено"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача или пользователь не найдены"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /tasks/{task-id}/invitations:
    get:
      tags:
      - "invitations"
      summary: "Получить все отправленные приглашения по задаче"
      description: "Запрос выполняется, только если пользователь - автор задачи"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/InvitationsResponseDto"
            description: "Список приглашений"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задаче не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /users/{user-id}/invitations:
    post:
      tags:
      - "invitations"
      summary: "Пригласить пользователя на задачу"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Информация о задаче, на которую мы приглашаем пользователя"
        required: true
        schema:
          $ref: "#/definitions/PostOnPerformTaskDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Приглашение на задачу успешно передано"
          schema:
            $ref: "#/definitions/InvitationResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пользователь не найден"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /users/{user-id}/performer/tasks:
    post:
      tags:
      - "responses"
      summary: "Назначить задачу пользователю"
      description: "Запрос выполняется, если пользователь откликнулся на задачу."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Информация о задаче, которую следует назначить"
        required: true
        schema:
          $ref: "#/definitions/PostOnPerformTaskDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Задача взята на исполнение"
          schema:
            $ref: "#/definitions/TaskResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/performer/tasks/{task-id}:
    delete:
      tags:
      - "tasks"
      summary: "Отказаться от исполнения"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Снятие с исполнения прошло успешно"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача или пользователь не найдены"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /users/{user-id}/performer/tasks/{task-id}:
    delete:
      tags:
      - "tasks"
      summary: "Снять задачу с исполнителя"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Задача успешно снята с исполнителя"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача или пользователь не найдены"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/performer/tasks:
    get:
      tags:
      - "tasks"
      summary: "Получение списка выполняемых мною задач"
      description: ""
      operationId: "myPerformerTasksGET"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/TasksResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
    post:
      tags:
      - "invitations"
      summary: "Взять задачу на исполнение"
      description: ""
      operationId: "myPerformerTasksPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Информация о задаче, которую следует взять на исполнение"
        required: true
        schema:
          $ref: "#/definitions/PostOnPerformTaskDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Задача взята на исполнение"
          schema:
            $ref: "#/definitions/TaskResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
  /registration:
    get:
      tags:
      - "registration"
      summary: "Проверка корректности данных регистрируемого пользователя"
      description: "Запрос производит проверку уникальности номера телефона и ника\
        \ пользователя, а также проводит проверку существования пользователя через\
        \ код подтверждения (приходит на указанный номер по смс). Ответ на запрос\
        \ зависит от параметров запроса."
      operationId: "registrationGET"
      produces:
      - "application/json"
      parameters:
      - name: "check_phone"
        in: "query"
        description: "Номер телефона пользователя"
        required: false
        type: "string"
      - name: "check_nickname"
        in: "query"
        description: "Никнейм пользователя"
        required: false
        type: "string"
      - name: "for_confirm"
        required: false
        in: "query"
        type: "string"
        description: "Номер телефона пользователя. После отправки запроса с данным параметром пользователю приходит смс."
      - name: "TempAuth-Token"
        in: "header"
        description: "Временный токен авторизации. Необходимо указывать на confirm-запрос."
        required: false
        type: "string"
      - name: "confirm"
        required: false
        in: "query"
        type: "string"
        description: "Код подтверждения, высланный на телефон. По умолчанию - 1234567."
      responses:
        200:
          description: "Запрос проверки уникальности успешно обработан"
          schema:
            $ref: "#/definitions/UniqueResponseDto"
        202:
          description: "Запрос на получение кода подтверждения прошел успешно, либо код успешно подтвержден."
          schema:
            $ref: "#/definitions/EmptyResponseDto"
          headers:
            TempAuth-Token:
              type: "string"
              description: "Временный токен авторизации"
        401:
          description: "Пользователь не авторизован - неверно указан временный ток\
            ен"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Registration"
  /tasks:
    post:
      tags:
      - "tasks"
      summary: "Создание задачи"
      description: ""
      operationId: "tasksPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Информация о задаче, которую необходимо создать"
        required: true
        schema:
          $ref: "#/definitions/PostTaskDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Задача создана"
          schema:
            $ref: "#/definitions/TaskResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
    get:
      tags:
      - "search"
      summary: "Поиск задач по ключевому слову"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "find"
        in: "query"
        description: "Если значения поля задано, выполняется поиск задач, характеристики которых попадают под ключевое слово."
        required: false
        type: "string"
      - name: "by"
        in: "query"
        description: "Если значения поля равно tag, выполняется поиск по тегу."
        required: false
        type: "string"
      - name: "tag"
        in: "query"
        description: "Значение тега, используется в паре с by=tag"
        required: false
        type: "string"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/TasksResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /tasks/{task-id}:
    get:
      tags:
      - "tasks"
      summary: "Получить информацию по задаче"
      description: ""
      operationId: "tasksTask_idGET"
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Представление задачи"
          schema:
            $ref: "#/definitions/TaskResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
    put:
      tags:
      - "tasks"
      summary: "Обновление задачи"
      description: ""
      operationId: "tasksTask_idPUT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Обновляемая информация по задаче"
        required: false
        schema:
          $ref: "#/definitions/PutTaskDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Задача обновлена"
          schema:
            $ref: "#/definitions/TaskResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
    delete:
      tags:
      - "tasks"
      summary: "Удалить задачу"
      description: ""
      operationId: "tasksTask_idDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Задача успешно удалена"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Tasks"
  /notes/{note-id}/comments:
    get:
      tags:
      - "comments"
      summary: "Получить все комментарии к записи"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "note-id"
        in: "path"
        description: "Идентификатор записи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/CommentsResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Запись не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Comments"
    post:
      tags:
      - "comments"
      summary: "Добавление комментария"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "note-id"
        in: "path"
        description: "Идентификатор записи"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Комментарий, который необходимо создать"
        required: true
        schema:
          $ref: "#/definitions/PutPostCommentDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Комментарий добавлен"
          schema:
            $ref: "#/definitions/CommentResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Запись не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Comments"
  /notes/{note-id}/comments/{comment-id}:
    put:
      tags:
      - "comments"
      summary: "Редактирование комментария"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "note-id"
        in: "path"
        description: "Идентификатор записи"
        required: true
        type: "integer"
      - name: "comment-id"
        in: "path"
        description: "Идентификатор комментария"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Обновляемая информация комментария"
        required: true
        schema:
          $ref: "#/definitions/PutPostCommentDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Комментарий обновлен"
          schema:
            $ref: "#/definitions/CommentResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Запись или комментарий не найдены"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Comments"
    delete:
      tags:
      - "comments"
      summary: "Удалить комментарий"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "note-id"
        in: "path"
        description: "Идентификатор записи"
        required: true
        type: "integer"
      - name: "comment-id"
        in: "path"
        description: "Идентификатор комментария"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Комментарий успешно удален"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Запись или комментарий не найдены"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Comments"
  /tasks/{task-id}/responses:
    get:
      tags:
      - "responses"
      summary: "Получение списка откликов на задачу"
      description: ""
      operationId: "tasksTask_idResponsesGET"
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/ResponsesOnTaskResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Responses"
  /my/responses/{response-id}:
    delete:
      tags:
      - "responses"
      summary: "Отменить отклик"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "response-id"
        in: "path"
        description: "Идентификатор отклика"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Отклик отменен"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Отклик не найден"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/responses:
    post:
      tags:
      - "responses"
      summary: "Отклик на задачу"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Отклик"
        required: true
        schema:
          $ref: "#/definitions/PostResponseOnTaskDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Отклик на задачу успешно отправлен"
          schema:
            $ref: "#/definitions/ResponseOnTaskResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /users:
    get:
      tags:
      - "search"
      summary: "Поиск пользователей"
      operationId: "usersGET"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "by"
        in: "query"
        description: "Если значение параметра равно nickname, выполняется поиск по никнейму. Если значение поля не задано, поиск выполняется по всем параметрам профиля"
        required: false
        type: "string"
      - name: "nickname"
        in: "query"
        description: "Значение никнейма, по которому выполняется поиск"
        type: "string"
        required: false
      - name: "find"
        in: "query"
        description: "Если значения поля задано, выполняется поиск пользователей, характеристики которых попадают под значение параметра"
        required: false
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: false
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан. В случае если поиск выполнялся по никнейму (by=nickname) возвращается не МАССИВ, а ОДИН ОБЪЕКТ"
          schema:
            $ref: "#/definitions/UsersResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
    post:
      tags:
      - "registration"
      summary: "Регистрация пользователя"
      operationId: "usersPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "TempAuth-Token"
        in: "header"
        description: "Временный токен авторизации"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Информация о пользователе, которого необходимо зарегистриров\
          ать. Информация добавляется только в случае, когда номер телефона подтвержден"
        required: true
        schema:
          $ref: "#/definitions/PostUserDto"
      responses:
        201:
          description: "Регистрация прошла успешно"
          schema:
            $ref: "#/definitions/UserResponseDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
      x-swagger-router-controller: "Registration"
  /users/{user-id}:
    get:
      tags:
      - "users"
      summary: "Получить информацию о пользователе"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Представление пользователя"
          schema:
            $ref: "#/definitions/UserResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пользователь не найден"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
    put:
      tags:
      - "users"
      summary: "Обновление информации по пользователю"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Обновляемая информация по пользователю"
        required: true
        schema:
          $ref: "#/definitions/PutUserDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Информация о пользователе обновлена"
          schema:
            $ref: "#/definitions/UserResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пользователь обновлен"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/followings:
    post:
      tags:
      - "subscriptions"
      summary: "Подписаться на пользователя"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Идентификатор пользователя, на которого мы подписываемся"
        required: true
        schema:
          $ref: "#/definitions/PostSubscriptionDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Подписка на пользователя произошла успешно"
          schema:
            $ref: "#/definitions/UserResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
    get:
      tags:
      - "subscriptions"
      summary: "Получение списка пользователей, на которых я подписан"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "find"
        in: "query"
        description: "Если значения поля задано, выполняется поиск пользователей,\
          \ характеристики которых попадают под значение параметра - имя, фамилия\
          , ник"
        required: false
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/UsersResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/followings/{user-id}:
    delete:
      tags:
      - "subscriptions"
      summary: "Отписаться от пользователя"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      responses:
        200:
          description: "Отписка произошла успешно"
          schema:
            $ref: "#/definitions/DeletedResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Пользователь не обнаружен"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /my/followers:
    get:
      tags:
      - "subscriptions"
      summary: "Получение списка пользователей, подписанных на меня"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "find"
        in: "query"
        description: "Если значения поля задано, выполняется поиск пользователей,\
          \ характеристики которых попадают под значение параметра - имя, фамилия\
          , ник"
        required: false
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/UsersResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /tasks/{task-id}/conversation/messages:
    get:
      tags:
      - "conversations"
      summary: "Получение списка сообщений"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "label"
        in: "query"
        description: "Метка, которой помечено сообщение - возможные значения - needs_review (требуется пересмотр), approved (одобрено), in_progress (в процессе). Если значение метки не задано, то возвращаются все сообщения диалога"
        required: false
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/MessagesResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /tasks/{task-id}/conversation/messages/{message-id}:
    put:
      tags:
      - "conversations"
      summary: "Проставление метки для сообщения."
      description: "Запрос обрабатывается только в том случае, если пользователь - автор задачи"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "message-id"
        in: "path"
        description: "Идентификатор сообщения"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Метка для сообщения"
        required: true
        schema:
          $ref: "#/definitions/PutMessageLabelDto"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        201:
          description: "Задача обновлена"
          schema:
            $ref: "#/definitions/MessageResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача или сообщение не найдены"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /tasks/{task-id}/conversation/images:
    get:
      tags:
      - "conversations"
      summary: "Получение изображений из всех сообщений"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/ImagesResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /tasks/{task-id}/conversation/videos:
    get:
      tags:
      - "conversations"
      summary: "Получение всех видеозаписей из всех сообщений"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/VideosResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /tasks/{task-id}/conversation/documents:
    get:
      tags:
      - "conversations"
      summary: "Получение всех документов из всех сообщений"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/DocumentsResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /users/{user-id}/followers:
    get:
      tags:
      - "subscriptions"
      summary: "Получение списка подписчиков пользователя"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/UsersResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /users/{user-id}/followings:
    get:
      tags:
      - "subscriptions"
      summary: "Получение списка подписок пользователя"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "user-id"
        in: "path"
        description: "Идентификатор пользователя"
        required: true
        type: "integer"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается идентификатор записи, с которой следует начать о\
          тсчет (запись не включается). Если значение параметра не задано, возвращ\
          аются записи, начиная с первой по дате публикаци."
        required: false
        type: "integer"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/UsersResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /tasks/{task-id}/conversation:
    get:
      tags:
      - "conversations"
      summary: "Получение информации по диалогу"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "task-id"
        in: "path"
        description: "Идентификатор задачи"
        required: true
        type: "integer"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/ConversationInfoResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        404:
          description: "Задача не найдена"
          schema:
            $ref: "#/definitions/404_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /all:
    get:
      tags:
      - "search"
      summary: "Поисковый запрос"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "find"
        in: "query"
        description: "Если значения поля задано, выполняется поиск сущностей системы, характеристики которых попадают под ключевое слово."
        required: false
        type: "string"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "by"
        in: "query"
        description: "Если указано значение tag, выдаются записи, соответствующие данному тегу, а также пользователи, у которых есть скиллы, соответствующие тегу."
        type: "string"
        required: false
      - name: "tag"
        in: "query"
        description: "Используется в паре с параметром tag, указывается значение тега, по которому следует осуществлять поиск"
        type: "string"
        required: false
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/SearchResultResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /countries:
    get:
      tags:
      - "search"
      summary: "Поиск стран"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Отступ необходимый для выбора определенного подмножества стран"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Количество возвращаемых стран(ограничено сверху числом 1000)"
        required: true
        type: "integer"
      - name: "find"
        in: "query"
        description: "Ключевое слово(имя или часть имени страны), по которому ведется поиск среди стран"
        required: false
        type: "string"
      responses:
        200:
          description: "Запрос успешно обработан."
          schema:
            $ref: "#/definitions/CountriesResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /countries/{country-id}/cities:
    get:
      tags:
      - "search"
      summary: "Поиск городов"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "country-id"
        in: "path"
        description: "Идентификатор страны"
        required: true
        type: "integer"
      - name: "offset"
        in: "query"
        description: "Отступ необходимый для выбора определенного подмножества городов"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Количество возвращаемых городов(ограничено сверху числом 1000)"
        required: true
        type: "integer"
      - name: "find"
        in: "query"
        description: "Ключевое слово(имя или часть имени города), по которому ведется поиск среди городов"
        required: false
        type: "string"
      responses:
        200:
          description: "Запрос успешно обработан."
          schema:
            $ref: "#/definitions/CitiesResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /cities/{city-id}/schools:
    get:
      tags:
      - "search"
      summary: "Поиск школ"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "city-id"
        in: "path"
        description: "Идентификатор города"
        required: true
        type: "integer"
      - name: "offset"
        in: "query"
        description: "Отступ необходимый для выбора определенного подмножества школ"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Количество возвращаемых школ(ограничено сверху числом 1000)"
        required: true
        type: "integer"
      - name: "find"
        in: "query"
        description: "Ключевое слово(имя или часть имени школы), по которому ведется поиск среди школ"
        required: false
        type: "string"
      responses:
        200:
          description: "Запрос успешно обработан."
          schema:
            $ref: "#/definitions/SchoolsResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /cities/{city-id}/universities:
    get:
      tags:
      - "search"
      summary: "Поиск университетов"
      produces:
      - "application/json"
      parameters:
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "city-id"
        in: "path"
        description: "Идентификатор города"
        required: true
        type: "integer"
      - name: "offset"
        in: "query"
        description: "Отступ необходимый для выбора определенного подмножества университетов"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Количество возвращаемых университетов(ограничено сверху числом 1000)"
        required: true
        type: "integer"
      - name: "find"
        in: "query"
        description: "Ключевое слово(имя или часть имени университета), по которому ведется поиск среди университетов"
        required: false
        type: "string"
      responses:
        200:
          description: "Запрос успешно обработан."
          schema:
            $ref: "#/definitions/UniversitiesResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /tags:
    get:
      tags:
      - "search"
      summary: "Поиск тегов по ключевому слову"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "find"
        in: "query"
        description: "Если значения поля задано, выполняется поиск тегов, характеристики которых попадают под ключевое слово."
        required: false
        type: "string"
      - name: "Auth-Token"
        in: "header"
        description: "Токен авторизации"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        description: "Количество возвращаемых записей"
        required: true
        type: "integer"
      - name: "from"
        in: "query"
        description: "Указывается значение тега, с которого требуется начать отсчет новых."
        required: false
        type: "string"
      responses:
        200:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/TagsResponseDto"
        401:
          description: "Пользователь не авторизован"
          schema:
            $ref: "#/definitions/401_ErrorDto"
        403:
          description: "Данное действие для пользователя запрещенно"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
  /reset:
    get:
      tags:
      - "commons"
      summary: "Сброс пароля"
      produces:
      - "application/json"
      parameters:
      - name: "TempAuth-Token"
        in: "header"
        description: "Временный токен авторизации"
        required: false
        type: "string"
      - name: "for"
        in: "query"
        description: "Указывается назначение запроса. В случае, если мы хотим получить код для сброса пароля, необходимо указать параметр code. Если мы хотим подтвердить присланный код, необходимо указать значение параметра confirm"
        type: "string"
        required: false
      - name: "phone"
        in: "query"
        description: "Номер телефона пользователя без +7. Значение указывается в паре с параметром for=code"
        required: false
        type: "string"
      - name: "code"
        in: "query"
        description: "Код подтверждения. Указывается в паре с параметром for=confrim"
        type: "string"
        required: false
      responses:
        200:
          description: "Запрос успешно обработан - смс выслано на телефон"
          schema:
            $ref: "#/definitions/EmptyResponseDto"
          headers:
            TempAuth-Token:
              type: "string"
              description: "Временный токен авторизации"
        202:
          description: "Результат подтверждения кода"
          schema:
            $ref: "#/definitions/ConfirmResponseDto"
          headers:
            TempAuth-Token:
              type: "string"
              description: "Временный токен авторизации"
        403:
          description: "Пользователь с данным номером не найден"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
    post:
      tags:
      - "commons"
      summary: "Отправка нового пароля"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "for"
        in: "query"
        description: "Назначение запроса. Необходимо указать for=password"
        type: "string"
        required: true
      - name: "TempAuth-Token"
        in: "header"
        description: "Временный токен авторизации"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Информация о пароле"
        required: true
        schema:
          $ref: "#/definitions/PostPasswordDto"
      responses:
        201:
          description: "Запрос успешно обработан"
          schema:
            $ref: "#/definitions/EmptyResponseDto"
        403:
          description: "Временный токен не верный"
          schema:
            $ref: "#/definitions/403_ErrorDto"
        500:
          description: "Внутренняя ошибка сервера"
          schema:
            $ref: "#/definitions/500_ErrorDto"
definitions:
  PostDto:
    type: "object"
    properties:
      publishedTime:
        type: "integer"
        description: "Дата/время публикации в формате UNIX TIME"
      id:
        type: "integer"
        description: "Идентификатор поста"
      published:
        type: "boolean"
        description: "Опубликован пост, или нет"
      author:
        description: "Данные автора поста"
        $ref: "#/definitions/UserDto"
      cover:
        description: "Обложка поста"
        $ref: "#/definitions/ImageDto"
      title:
        type: "string"
        description: "Заголовок поста"
      text:
        type: "string"
        description: "Текст поста"
      tags:
        type: "array"
        description: "Список тегов"
        items:
          type: "string"
      place:
        description: "Место локации поста"
        $ref: "#/definitions/PlaceDto"
      likesCount:
        type: "integer"
        description: "Количество лайков"
      commentsCount:
        type: "integer"
        description: "Количество комментариев"
      isLiked:
        type: "boolean"
        description: "Имеет значение true, если пользователь лайкнул пост. false\
          \ - в противном случае"
      favorited:
        type: "boolean"
        description: "Имеет значение true, если пользователь добавил задачу в избр\
          анное. false - в противном случае"
      media:
        description: "Прикрепленные файлы"
        $ref: "#/definitions/MediaDto"
  PostsDto:
    type: "array"
    items:
      $ref: "#/definitions/PostDto"
  PostResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Информация о посте"
        $ref: "#/definitions/PostDto"
  PostsResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Информация о постах"
        $ref: "#/definitions/PostsDto"
  NoteDto:
    type: "object"
    properties:
      noteType:
        type: "string"
        description: "Тип записи, T - задача, P - пост, E - событие"
      publishedTime:
        type: "integer"
        description: "Дата/время публикации в формате UNIX TIME"
      id:
        type: "integer"
        description: "Идентификатор задачи"
      published:
        type: "boolean"
        description: "Опубликована, или нет"
      author:
        description: "Данные автора задачи"
        $ref: "#/definitions/UserDto"
      cover:
        description: "Обложка задачи"
        $ref: "#/definitions/ImageDto"
      type:
        type: "string"
        description: "Тип задачи - public/private"
      title:
        type: "string"
        description: "Заголовок задачи"
      text:
        type: "string"
        description: "Текст задачи"
      tags:
        type: "array"
        description: "Список тегов"
        items:
          type: "string"
      place:
        description: "Место локации задачи"
        $ref: "#/definitions/PlaceDto"
      likesCount:
        type: "integer"
        description: "Количество лайков"
      commentsCount:
        type: "integer"
        description: "Количество комментариев"
      respondersCount:
        type: "integer"
        description: "Количество пользователей, откликнувшихся на задачу"
      isLiked:
        type: "boolean"
        description: "Имеет значение true, если пользователь лайкнул задачу. false\
          \ - в противном случае"
      responsed:
        type: "boolean"
        description: "Имеет значение true, если пользователь откликнулся на задачу\
          , false - в противном случае"
      favorited:
        type: "boolean"
        description: "Имеет значение true, если пользователь добавил задачу в избр\
          анное. false - в противном случае"
      response:
        description: "Мой отклик. Поле заданно, только если пользователь, запрашивающий задачу, сделал на нее отклик"
        $ref: "#/definitions/ResponseOnTaskInTaskDto"
      media:
        description: "Прикрепленные файлы"
        $ref: "#/definitions/MediaDto"
      status:
        type: "string"
        description: "Статус выполнения задачи - hunting/working/accepted/done"
      deadline:
        type: "integer"
        description: "Дедлайн задачи - в формате UNIX TIME"
      performer:
        description: "Исполнитель"
        $ref: "#/definitions/UserDto"
      participantsCount:
        description: "Количество участников события"
        type: "integer"
  NotesDto:
    type: "array"
    items:
      $ref: "#/definitions/NoteDto"
  NoteResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Информация о записи"
        $ref: "#/definitions/NoteDto"
  NotesResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Информация о записях"
        $ref: "#/definitions/NotesDto"
  ResumeJobDto:
    type: "object"
    properties:
      country:
        description: "Страна, в случае PUT-запроса не указывается"
        $ref: "#/definitions/CountryDto"
      city:
        description: "Город, в случае PUT-запроса указывается только id-города"
        $ref: "#/definitions/CountryDto"
      companyTitle:
        description: "Название компании"
        type: "string"
      post:
        description: "Должность"
        type: "string"
      beginingDate:
        description: "Дата начала работы в формате UNIX-time"
        type: "integer"
      endingDate:
        description: "Дата окончания работы в формате UNIX-time"
        type: "integer"
      isCurrentJob:
        description: "Отметка, является ли место работы текущим"
        type: boolean
  ResumeSchoolDto:
    type: "object"
    properties:
      school:
        description: "Школа, в случае PUT-запроса указывается только id"
        $ref: "#/definitions/SchoolDto"
      beginingDate:
        description: "Дата начала учебы в формате UNIX-time"
        type: "integer"
      country:
        description: "Страна, в случае PUT-запроса не указывается"
        $ref: "#/definitions/CountryDto"
      city:
        description: "Город, в случае PUT-запроса не указывается"
        $ref: "#/definitions/CountryDto"
      endingDate:
        description: "Дата окончания учебы в формате UNIX-time"
        type: "integer"
      isCurrentSchool:
        description: "Отметка, является ли место учебы текущим"
        type: boolean
  ResumeUniversityDto:
    type: "object"
    properties:
      university:
        description: "Университет. В случае put запроса указывается только id"
        $ref: "#/definitions/UniveristyDto"
      country:
        description: "Страна, в случае PUT-запроса не указывается"
        $ref: "#/definitions/CountryDto"
      city:
        description: "Город, в случае PUT-запроса не указывается"
        $ref: "#/definitions/CountryDto"
      beginingDate:
        description: "Дата начала учебы в формате UNIX-time"
        type: "integer"
      endingDate:
        description: "Дата окончания учебы в формате UNIX-time"
        type: "integer"
      isCurrentUniversity:
        description: "Отметка, является ли место учебы текущим"
        type: boolean
  ResumeDto:
    type: "object"
    properties:
      birthday:
        description: "День рождения пользователя в формате UNIX-time"
        type: "integer"
      country:
        description: "Страна, в случае PUT-запроса указывается только id"
        $ref: "#/definitions/CountryDto"
      city:
        description: "Город, в случае PUT-запроса указывается только id-города. При этом страна не рассматривается."
        $ref: "#/definitions/CityDto"
      skills:
        type: "array"
        description: "Список скиллов"
        items:
          type: "string"
      experience:
        type: "array"
        description: "Список мест работы"
        items:
          $ref: "#/definitions/ResumeJobDto"
      secondaryEducation:
        type: "array"
        description: "Список школ"
        items:
          $ref: "#/definitions/ResumeSchoolDto"
      higherEducation:
        type: "array"
        description: "Список университетов"
        items:
          $ref: "#/definitions/ResumeUniversityDto"
  ResumeResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Резюме пользователя"
        $ref: "#/definitions/ResumeDto"
  ConfirmResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Результат подтверждения"
        $ref: "#/definitions/ConfirmResultDto"
  PostPasswordDto:
    type: "object"
    properties:
      password:
        description: "Новый пароль"
        type: "string"
  ConfirmResultDto:
    type: "object"
    properties:
      confirmed:
        description: "Результат подтверждения"
        type: "boolean"
  CountriesResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Список стран"
        $ref: "#/definitions/CountriesDto"
  CitiesResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Список городов"
        $ref: "#/definitions/CitiesDto"
  SchoolsResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Список школ"
        $ref: "#/definitions/SchoolsDto"
  UniversitiesResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Список университетов"
        $ref: "#/definitions/UniversitiesDto"
  SearchResultDto:
    type: "object"
    properties:
      tags:
        description: "Список тегов, найденных по ключевому слову"
        type: "array"
        items:
          type: "string"
      tasks:
        description: "Список задач, найденных по ключевому слову"
        type: "array"
        items:
          $ref: "#/definitions/TaskDto"
      posts:
        description: "Список постов, найденных по ключевому слову"
        type: "array"
        items:
          $ref: "#/definitions/PostDto"
      tasksCount:
        type: "integer"
        description: "Количество задач, найденных по ключевому слову/тегу"
      postsCount:
        type: "integer"
        description: "Количество постов, найденных по ключевому слову/тегу"
      users:
        description: "Список пользователей, найденных по ключевому слову"
        type: "array"
        items:
          $ref: "#/definitions/UserDto"
      usersCount:
        type: "integer"
        description: "Количество пользователей, найденных по ключевому слову/тегу"
      tagsCount:
        type: "integer"
        description: "Количество тегов, найденных по ключевому слову/тегу"
  ConversationInfoDto:
    type: "object"
    properties:
      imagesCount:
        type: "integer"
        description: "Количество изображений"
      videosCount:
        type: "integer"
        description: "Количество видео"
      documentsCount:
        type: "integer"
        description: "Количество документов"
  SearchResultResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Результат поискового запроса"
        $ref: "#/definitions/SearchResultDto"
  MessageDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор сообщения"
      sender:
        description: "Отправитель сообщения"
        $ref: "#/definitions/UserDto"
      date:
        type: "integer"
        description: "Дата отправки в формате  UNIX TIME"
      label:
        type: "string"
        description: "Метка сообщения"
      text:
        type: "string"
        description: "Текст сообщения"
      videosCount:
        type: "integer"
        description: "Количество видеозаписей"
      imagesCount:
        type: "integer"
        description: "Количество изображений"
      documentsCount:
        type: "integer"
        description: "Количество документов"
      images:
        type: "array"
        description: "Список фотографий"
        items:
          $ref: "#/definitions/ImageDto"
      documents:
        type: "array"
        description: "Список документов"
        items:
          $ref: "#/definitions/DocumentDto"
      videos:
        type: "array"
        description: "Список видеофайлов"
        items:
          $ref: "#/definitions/VideoDto"
  PutMessageLabelDto:
    type: "object"
    required:
    - "label"
    properties:
      label:
        type: "string"
        description: "Метка сообщения"
  PostSubscriptionDto:
    type: "object"
    required:
    - "userId"
    properties:
      userId:
        type: "integer"
        description: "Идентификатор пользователя"
  ErrorResponseMeta:
    type: "object"
    properties:
      code:
        type: "integer"
        description: "Код ответа"
      status:
        type: "string"
        description: "Статус выполнения запроса"
      message:
        type: "string"
        description: "Сообщение сервера"
  UserInviteDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор приглашения"
      task:
        description: "Информация о задаче, в которую приглашают пользователя. Заполнены будут только некоторые поля"
        $ref: "#/definitions/TaskDto"
  InvitationDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор приглашения"
      invited:
        description: "Информация о приглашенном пользователе"
        $ref: "#/definitions/UserDto"
  MetaDto:
    type: "object"
    properties:
      code:
        type: "integer"
        description: "HTTP-код"
      status:
        type: "string"
        description: "Статус выполнения запроса - success/fail"
  UniqueDto:
    type: "object"
    properties:
      isUnique:
        type: "boolean"
        description: "Уникальность логина/телефона"
  PutUserDto:
    type: "object"
    properties:
      firstName:
        type: "string"
        description: "Имя пользователя"
      lastName:
        type: "string"
        description: "Фамилия пользователя"
      nickName:
        type: "string"
        description: "Ник пользователя"
      description:
        type: "string"
        description: "Описание пользователя"
      avatar:
        description: "Аватар пользователя"
        $ref: "#/definitions/ImageDto"
  CountryDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор страны"
      title:
        type: "string"
        description: "Название страны"
  CityDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор города"
      title:
        type: "string"
        description: "Название города"
  SchoolDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор школы"
      title:
        type: "string"
        description: "Название школы"
      cityTitle:
        type: "string"
        description: "Название города школы"
      countryTitle:
        type: "string"
        description: "Название страны школы"
  UniveristyDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор университета"
      title:
        type: "string"
        description: "Название университета"
      cityTitle:
        type: "string"
        description: "Название города университета"
      countryTitle:
        type: "string"
        description: "Название страны университета"
  UserDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор пользователя"
      firstName:
        type: "string"
        description: "Имя пользователя"
      lastName:
        type: "string"
        description: "Фамилия пользователя"
      nickName:
        type: "string"
        description: "Ник пользователя"
      avatar:
        description: "Аватар пользователя"
        $ref: "#/definitions/ImageDto"
      description:
        type: "string"
        description: "Описание пользователя"
      followersCount:
        type: "integer"
        description: "Количество подписчиков"
      followingsCount:
        type: "integer"
        description: "Количество подписавшихся"
      subscribed:
        type: "boolean"
        description: "Подписан я на пользователя, или нет"
  TagDto:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Название тега"
      subscribed:
        type: "boolean"
        description: "Значение, показывающее, подписан ли пользователь на тег"
      countRecords:
        type: "integer"
        description: "Количество записей, которое соответствует данному тегу"
  PlaceDto:
    type: "object"
    properties:
      placeName:
        type: "string"
        description: "Название места проведения"
      location:
        description: "Координаты места проведения"
        $ref: "#/definitions/LocationDto"
  LocationDto:
    type: "object"
    properties:
      longitude:
        type: "string"
        description: "Долгота"
      latitude:
        type: "string"
        description: "Широта"
  ImageDto:
    type: "object"
    properties:
      authorId:
        type: "integer"
        description: "Идентикифактор автора, указывается только в запросах на получение медиа из диалогов. В остальных случаях - null."
      size:
        type: "integer"
        description: "Размер файла в байтах"
      extension:
        type: "string"
        description: "Расширение файла"
      name:
        type: "string"
        description: "Название файла"
      mimeType:
        type: "string"
        description: "MIME-тип изображения"
      url:
        type: "string"
        description: "URL стандарт-изображения"
      thumbUrl:
        type: "string"
        description: "URL маленького изображения"
      originalUrl:
        type: "string"
        description: "URL оригинальной версии изображения"
  DocumentDto:
    type: "object"
    properties:
      authorId:
        type: "integer"
        description: "Идентикифактор автора, указывается только в запросах на получение медиа из диалогов. В остальных случаях - null."
      size:
        type: "integer"
        description: "Размер файла в байтах"
      extension:
        type: "string"
        description: "Расширение файла"
      mimeType:
        type: "string"
        description: "MIME-тип изображения"
      name:
        type: "string"
        description: "Название файла"
      url:
        type: "string"
        description: "URL документа"
  VideoDto:
    type: "object"
    properties:
      authorId:
        type: "integer"
        description: "Идентикифактор автора, указывается только в запросах на получение медиа из диалогов. В остальных случаях - null."
      size:
        type: "integer"
        description: "Размер файла в байтах"
      extension:
        type: "string"
        description: "Расширение файла"
      name:
        type: "string"
        description: "Название файла"
      mimeType:
        type: "string"
        description: "MIME-тип изображения"
      previewImage:
        description: "Картинка-превью видео"
        $ref: "#/definitions/ImageDto"
      url:
        type: "string"
        description: "URL видео"
  MediaDto:
    type: "object"
    properties:
      images:
        type: "array"
        description: "Список фотографий"
        items:
          $ref: "#/definitions/ImageDto"
      documents:
        type: "array"
        description: "Список документов"
        items:
          $ref: "#/definitions/DocumentDto"
      videos:
        type: "array"
        description: "Список видеофайлов"
        items:
          $ref: "#/definitions/VideoDto"
  TaskDto:
    type: "object"
    properties:
      publishedTime:
        type: "integer"
        description: "Дата/время публикации в формате UNIX TIME"
      id:
        type: "integer"
        description: "Идентификатор задачи"
      published:
        type: "boolean"
        description: "Опубликована, или нет"
      author:
        description: "Данные автора задачи"
        $ref: "#/definitions/UserDto"
      cover:
        description: "Обложка задачи"
        $ref: "#/definitions/ImageDto"
      type:
        type: "string"
        description: "Тип задачи - public/private"
      title:
        type: "string"
        description: "Заголовок задачи"
      text:
        type: "string"
        description: "Текст задачи"
      tags:
        type: "array"
        description: "Список тегов"
        items:
          type: "string"
      place:
        description: "Место локации задачи"
        $ref: "#/definitions/PlaceDto"
      likesCount:
        type: "integer"
        description: "Количество лайков"
      commentsCount:
        type: "integer"
        description: "Количество комментариев"
      respondersCount:
        type: "integer"
        description: "Количество пользователей, откликнувшихся на задачу"
      isLiked:
        type: "boolean"
        description: "Имеет значение true, если пользователь лайкнул задачу. false\
          \ - в противном случае"
      responsed:
        type: "boolean"
        description: "Имеет значение true, если пользователь откликнулся на задачу\
          , false - в противном случае"
      favorited:
        type: "boolean"
        description: "Имеет значение true, если пользователь добавил задачу в избр\
          анное. false - в противном случае"
      response:
        description: "Мой отклик. Поле заданно, только если пользователь, запрашивающий задачу, сделал на нее отклик"
        $ref: "#/definitions/ResponseOnTaskInTaskDto"
      media:
        description: "Прикрепленные файлы"
        $ref: "#/definitions/MediaDto"
      status:
        type: "string"
        description: "Статус выполнения задачи - hunting/working/accepted/done"
      deadline:
        type: "integer"
        description: "Дедлайн задачи - в формате UNIX TIME"
      performer:
        description: "Исполнитель"
        $ref: "#/definitions/UserDto"
  ResponseOnTaskInTaskDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор отклика"
      message:
        type: "string"
        description: "Текст отклика"
  MessageResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Сообщение"
        $ref: "#/definitions/MessageDto"
  MessagesResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Сообщения"
        $ref: "#/definitions/MessagesDto"
  ResponseOnTaskDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор отклика"
      responder:
        description: "Информация об откликнувшемся пользователе"
        $ref: "#/definitions/UserDto"
      message:
        type: "string"
        description: "Сообщение отклика"
  CommentDto:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Идентификатор комментария"
      author:
        description: "Автор комментария"
        $ref: "#/definitions/UserDto"
      text:
        type: "string"
        description: "Текст комментария"
      publishedTime:
        type: "integer"
        description: "Дата/время публикации в формате UNIX TIME"
  InvitationResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Приглашение"
        $ref: "#/definitions/InvitationDto"
  PostResponseOnTaskDto:
    type: "object"
    required:
    - "taskId"
    properties:
      taskId:
        type: "integer"
        description: "Идентификатор задачи"
      message:
        type: "string"
        description: "Прикрепленный к отклику текст"
  PostUserDto:
    type: "object"
    required:
    - "firstName"
    - "lastName"
    - "nickName"
    - "password"
    properties:
      firstName:
        type: "string"
        description: "Имя пользователя"
      lastName:
        type: "string"
        description: "Фамилия пользователя"
      nickName:
        type: "string"
        description: "Ник пользователя"
      password:
        type: "string"
        description: "Пароль пользователя"
      avatar:
        description: "Аватар пользователя"
        $ref: "#/definitions/ImageDto"
  PostTagDto:
    type: "object"
    properties:
      tag:
        type: "string"
        description: "Значение тега, на который мы хотим подписаться"
  PostTaskDto:
    type: "object"
    properties:
      published:
        type: "boolean"
        description: "Опубликована, или нет. Задача будет опубликована только после указания обязательных полей."
      cover:
        description: "Обложка задачи"
        $ref: "#/definitions/ImageDto"
      type:
        type: "string"
        description: "Тип задачи - public/private"
      title:
        type: "string"
        description: "Заголовок задачи"
      text:
        type: "string"
        description: "Текст задачи"
      tags:
        type: "array"
        description: "Список тегов"
        items:
          type: "string"
      place:
        description: "Место локации задачи"
        $ref: "#/definitions/PlaceDto"
      media:
        description: "Прикрепленные файлы"
        $ref: "#/definitions/MediaDto"
      deadline:
        type: "integer"
        description: "Дедлайн задачи - в формате UNIX TIME"
  PutTaskDto:
    type: "object"
    properties:
      published:
        type: "boolean"
        description: "Опубликована, или нет"
      cover:
        description: "Обложка задачи"
        $ref: "#/definitions/ImageDto"
      type:
        type: "string"
        description: "Тип задачи - public/private"
      title:
        type: "string"
        description: "Заголовок задачи"
      text:
        type: "string"
        description: "Текст задачи"
      tags:
        type: "array"
        description: "Список тегов"
        items:
          type: "string"
      place:
        description: "Место локации задачи"
        $ref: "#/definitions/PlaceDto"
      media:
        description: "Прикрепленные файлы"
        $ref: "#/definitions/MediaDto"
      deadline:
        type: "integer"
        description: "Дедлайн задачи - в формате UNIX TIME"
  PutPostCommentDto:
    type: "object"
    required:
    - "text"
    properties:
      text:
        type: "string"
        description: "Текст комментария"
  PostFavoriteTaskDto:
    type: "object"
    required:
    - "noteId"
    properties:
      noteId:
        type: "integer"
        description: "Идентификатор записи"
  PostOnPerformTaskDto:
    type: "object"
    required:
    - "taskId"
    properties:
      taskId:
        type: "integer"
        description: "Идентификатор задачи"
  CommentsDto:
    type: "array"
    items:
      $ref: "#/definitions/CommentDto"
  UserInvitesDto:
    type: "array"
    items:
      $ref: "#/definitions/UserInviteDto"
  InvitationsDto:
    type: "array"
    items:
      $ref: "#/definitions/InvitationDto"
  ResponsesOnTaskDto:
    type: "array"
    items:
      $ref: "#/definitions/ResponseOnTaskDto"
  TasksDto:
    type: "array"
    items:
      $ref: "#/definitions/TaskDto"
  CountriesDto:
    type: "array"
    items:
      $ref: "#/definitions/CountryDto"
  CitiesDto:
    type: "array"
    items:
      $ref: "#/definitions/CityDto"
  SchoolsDto:
    type: "array"
    items:
      $ref: "#/definitions/SchoolDto"
  UniversitiesDto:
    type: "array"
    items:
      $ref: "#/definitions/UniveristyDto"
  UsersDto:
    type: "array"
    items:
      $ref: "#/definitions/UserDto"
  TagsDto:
    type: "array"
    items:
      $ref: "#/definitions/TagDto"
  MessagesDto:
    type: "array"
    items:
      $ref: "#/definitions/MessageDto"
  CommentResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Комментарий"
        $ref: "#/definitions/CommentDto"
  UsersResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Список пользователей"
        $ref: "#/definitions/UsersDto"
  TagResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Тег"
        $ref: "#/definitions/TagDto"
  TagsResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Список тегов"
        $ref: "#/definitions/TagsDto"
  CommentsResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Комментарии"
        $ref: "#/definitions/CommentsDto"
  ResponseOnTaskResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Отклик"
        $ref: "#/definitions/ResponseOnTaskDto"
  ResponsesOnTaskResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Список откликов"
        $ref: "#/definitions/ResponsesOnTaskDto"
  TaskResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Задача"
        $ref: "#/definitions/TaskDto"
  TasksResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Список задач"
        $ref: "#/definitions/TasksDto"
  UniqueResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Сведения об уникальности данных"
        $ref: "#/definitions/UniqueDto"
  ConversationInfoResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Сведения о диалоге"
        $ref: "#/definitions/ConversationInfoDto"
  UserInvitesResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Список приглашений"
        $ref: "#/definitions/UserInvitesDto"
  InvitationsResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Информация о приглашении"
        $ref: "#/definitions/InvitationsDto"
  UserResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Информация о пользователе"
        $ref: "#/definitions/UserDto"
  ImagesDto:
    type: "array"
    items:
      $ref: "#/definitions/ImageDto"
  ImagesResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Информация список изображений"
        $ref: "#/definitions/ImagesDto"
  VideosDto:
    type: "array"
    items:
      $ref: "#/definitions/VideoDto"
  VideosResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Информация список изображений"
        $ref: "#/definitions/VideosDto"
  DocumentsDto:
    type: "array"
    items:
      $ref: "#/definitions/DocumentDto"
  DocumentsResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
      data:
        description: "Информация список изображений"
        $ref: "#/definitions/DocumentsDto"
  DeletedResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
  EmptyResponseDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/MetaDto"
  401_ErrorDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/ErrorResponseMeta"
    example:
      meta:
        code: 401
        status: "fail"
        message: "Unauthorized user"
  403_ErrorDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/ErrorResponseMeta"
    example:
      meta:
        code: 403
        status: "fail"
        message: "Banned user"
  404_ErrorDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/ErrorResponseMeta"
    example:
      meta:
        code: 404
        status: "fail"
        message: "Not found"
  500_ErrorDto:
    type: "object"
    properties:
      meta:
        description: "Информация об ответе"
        $ref: "#/definitions/ErrorResponseMeta"
    example:
      meta:
        code: 500
        status: "fail"
        message: "IllegalArgumentException"
